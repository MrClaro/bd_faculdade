openapi: 3.0.0
info:
  title: API de Autenticação - Projeto UNIFIO
  version: 1.0.0
  description: >
    API demonstrando autenticação com JWT, criptografia com bcrypt,
    persistência de dados com MongoDB (NoSQL) e rotas protegidas.

servers:
  - url: http://localhost:4000

tags:
  - name: Auth
    description: Rotas de autenticação
  - name: User
    description: Rotas relacionadas a usuários

components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        createdAt:
          type: string
          format: date-time

    LoginResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        message:
          type: string

    ProfileResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        iat:
          type: integer
        exp:
          type: integer

    ErrorResponse:
      type: object
      properties:
        message:
          type: string

paths:
  /register:
    post:
      tags:
        - Auth
      summary: Registra um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Username já está em uso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro no cadastro
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /login:
    post:
      tags:
        - Auth
      summary: Faz login do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login bem-sucedido (JWT setado no cookie)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro no login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /profile:
    get:
      tags:
        - Auth
      summary: Retorna dados do usuário autenticado
      responses:
        "200":
          description: Perfil do usuário autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponse"
        "401":
          description: Não autenticado ou token inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /logout:
    post:
      tags:
        - Auth
      summary: Faz logout limpando o cookie JWT
      responses:
        "200":
          description: Logout realizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      tags:
        - User
      summary: Retorna lista de todos os usuários (sem senhas)
      responses:
        "200":
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
        "500":
          description: Erro ao buscar usuários
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{id}/deactivate:
    put:
      tags:
        - User
      summary: Desativa um usuário
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do usuário a ser desativado
      responses:
        "200":
          description: Usuário desativado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro ao desativar o usuário
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
